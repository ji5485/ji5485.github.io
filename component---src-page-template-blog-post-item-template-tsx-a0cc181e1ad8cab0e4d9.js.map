{"version":3,"file":"component---src-page-template-blog-post-item-template-tsx-a0cc181e1ad8cab0e4d9.js","mappings":"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","sources":["webpack://@ji5485/ji5485.github.io/./src/components/organisms/PostItemHead.tsx","webpack://@ji5485/ji5485.github.io/./src/components/molecules/Markdown.tsx","webpack://@ji5485/ji5485.github.io/./src/hooks/useSetHeading.tsx","webpack://@ji5485/ji5485.github.io/./src/components/molecules/TableOfContents.tsx","webpack://@ji5485/ji5485.github.io/./src/components/organisms/PostItemBody.tsx","webpack://@ji5485/ji5485.github.io/./src/components/molecules/PostNavigator.tsx","webpack://@ji5485/ji5485.github.io/./src/components/molecules/Utterances.tsx","webpack://@ji5485/ji5485.github.io/./src/components/organisms/PostItemFoot.tsx","webpack://@ji5485/ji5485.github.io/./src/components/templates/BlogPostItem.tsx","webpack://@ji5485/ji5485.github.io/./src/page_template/BlogPostItemTemplate.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport Text, { TextComponent } from 'components/atoms/Text'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport { dateFormat, shortId } from 'utilities/utils'\n\ninterface PostItemHeadProps {\n  title: string\n  date: string\n  categories: string[]\n  thumbnail: IGatsbyImageData\n}\n\nconst Title = styled(Text)`\n  font-size: 40px;\n  font-weight: 700;\n  margin-top: 30px;\n\n  @media (max-width: 768px) {\n    font-size: 25px;\n  }\n`\n\nconst PostInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-top: 10px;\n  line-height: 1.5;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`\n\nconst Categories = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  ${TextComponent} {\n    font-size: 15px;\n    font-weight: 300;\n    margin-right: 15px;\n  }\n\n  @media (max-width: 768px) {\n    ${TextComponent} {\n      font-size: 12px;\n    }\n  }\n`\n\nconst Date = styled.div`\n  font-size: 15px;\n  font-weight: 300;\n  flex-shrink: 0;\n  padding-left: 30px;\n\n  @media (max-width: 768px) {\n    padding: 0;\n    font-size: 12px;\n  }\n`\n\nconst PostItemHead: FunctionComponent<PostItemHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <div>\n      <GatsbyImage image={thumbnail} alt=\"Thumbnail Image\" />\n      <Title>{title}</Title>\n      <PostInfo>\n        <Categories>\n          {categories.map((category: string) => (\n            <Text key={shortId()}>#{category}</Text>\n          ))}\n        </Categories>\n        <Date>{dateFormat(date)}</Date>\n      </PostInfo>\n    </div>\n  )\n}\n\nexport default PostItemHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ntype MarkdownProps = {\n  html: string\n}\n\nconst MarkdownComponent = styled.div`\n  display: flex;\n  flex-direction: column;\n  line-height: 1.8;\n  font-size: 16px;\n\n  h1 {\n    font-weight: 700;\n    font-size: 30px;\n    margin-bottom: 40px;\n  }\n\n  h2 {\n    font-weight: 700;\n    font-size: 25px;\n    margin-bottom: 30px;\n  }\n\n  h3 {\n    font-weight: 700;\n    font-size: 20px;\n    margin-bottom: 20px;\n  }\n\n  * + h1 {\n    margin-top: 100px;\n  }\n\n  * + h2 {\n    margin-top: 80px;\n  }\n\n  * + h3 {\n    margin-top: 60px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  img {\n    width: 100%;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);\n  }\n\n  blockquote {\n    padding: 5px 15px;\n    border-left: 3px solid rgba(30, 31, 32, 0.5);\n    margin: 20px 0;\n  }\n\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  hr {\n    border: 1px solid var(--color);\n    opacity: 0.5;\n    margin: 100px 0;\n  }\n\n  p {\n    padding: 3px 0;\n    word-break: break-word;\n  }\n\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  aside {\n    margin: 20px 0;\n    padding: 20px 15px;\n    border-radius: 7px;\n    background: #f1f3f5;\n    font-weight: 700;\n    line-height: 1.5;\n\n    body.dark & {\n      background: #343a40;\n      color: #ffffff;\n    }\n  }\n\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n    tab-size: 2;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  & > p > code[class*='language-'] {\n    padding: 2px 5px;\n    border-radius: 3px;\n    font-family: 'Roboto', 'Noto Sans KR', sans-serif;\n    color: var(--background);\n    tab-size: 2;\n    background: var(--color);\n  }\n\n  @media (max-width: 768px) {\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n  }\n`\n\nconst Markdown: FunctionComponent<MarkdownProps> = function ({ html }) {\n  return <MarkdownComponent dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default Markdown\n","import { useState, useEffect } from 'react'\n\nfunction useSetHeading(toc: string): string {\n  const [activeSlug, setActiveSlug] = useState<string>('')\n  const [headingElements, setHeadingElements] = useState<Element[]>([])\n\n  const scrollEvent = function () {\n    for (let i = headingElements.length - 1; i >= 0; i--) {\n      const { top } = headingElements[i].getBoundingClientRect()\n\n      if (top <= 0.1 && headingElements[i].id !== activeSlug) {\n        setActiveSlug(headingElements[i].id)\n        return\n      }\n    }\n\n    setActiveSlug('')\n  }\n\n  useEffect(() => {\n    const getElementsByTarget = () => {\n      const allHeadingTags: Element[] = Array.from(\n        window.document.querySelectorAll('h1, h2, h3'),\n      )\n      setHeadingElements(allHeadingTags)\n    }\n\n    getElementsByTarget()\n  }, [toc])\n\n  useEffect(() => {\n    window.addEventListener('scroll', scrollEvent)\n\n    return () => window.removeEventListener('scroll', scrollEvent)\n  }, [headingElements])\n\n  return activeSlug\n}\n\nexport default useSetHeading\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport useSetHeading from 'hooks/useSetHeading'\n\ntype TableOfContentsProps = {\n  toc: string\n}\n\nconst TableOfContentsComponent = styled.div`\n  position: relative;\n  width: 250px;\n\n  @media (max-width: 1350px) {\n    display: none;\n  }\n`\n\nconst TOC = styled.div<{ activeSlug: string }>`\n  position: sticky;\n  top: 150px;\n  border-left: 3px solid rgba(30, 31, 33, 0.5);\n  padding: 5px 0;\n  font-size: 15px;\n\n  a {\n    display: block;\n    padding: 4px 0;\n    opacity: 0.5;\n    transition: 0.3s all;\n  }\n\n  ul,\n  li {\n    list-style-type: none;\n  }\n\n  & ul {\n    padding: 0 10px;\n\n    ul {\n      padding-left: 0 10px;\n    }\n  }\n\n  a[href$='#${({ activeSlug }) => activeSlug}'] {\n    opacity: 1;\n    font-weight: 700;\n  }\n\n  body.dark & {\n    border-color: rgba(255, 255, 255, 0.5);\n  }\n`\n\nconst TableOfContents: FunctionComponent<TableOfContentsProps> = function ({\n  toc,\n}) {\n  const activeSlug: string = useSetHeading(toc)\n\n  return (\n    <TableOfContentsComponent>\n      {toc && (\n        <TOC\n          dangerouslySetInnerHTML={{ __html: toc }}\n          activeSlug={encodeURI(activeSlug)}\n        />\n      )}\n    </TableOfContentsComponent>\n  )\n}\n\nexport default TableOfContents\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport Markdown from 'components/molecules/Markdown'\nimport TableOfContents from 'components/molecules/TableOfContents'\n\ninterface PostItemBodyProps {\n  html: string\n  toc: string\n}\n\nconst PostItemBodyComponent = styled.div`\n  margin: 150px 0;\n  display: grid;\n  grid-template-columns: 768px 250px;\n  grid-gap: 30px;\n\n  @media (max-width: 1350px) {\n    display: block;\n  }\n\n  @media (max-width: 768px) {\n    margin: 80px 0;\n  }\n`\n\nconst PostItemBody: FunctionComponent<PostItemBodyProps> = function ({\n  html,\n  toc,\n}) {\n  return (\n    <PostItemBodyComponent>\n      <Markdown html={html} />\n      <TableOfContents toc={toc} />\n    </PostItemBodyComponent>\n  )\n}\n\nexport default PostItemBody\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport Icon, { IconComponent, IconProps } from 'components/atoms/Icon'\nimport Text from 'components/atoms/Text'\nimport { LinkComponent } from 'components/atoms/Link'\n\ntype PostNavigatorProps = {\n  direction: 'prev' | 'next'\n  slug: string\n  title: string\n}\n\nconst PostNavigatorComponent = styled(LinkComponent)<{ direction: string }>`\n  width: 47%;\n  display: flex;\n  flex-direction: column;\n  ${({ direction }) =>\n    direction === 'next'\n      ? `\n    align-items: flex-end;\n    margin-left: auto;\n  `\n      : ''}\n`\n\nconst LinkButton = styled.div<{ direction: string }>`\n  display: flex;\n  flex-direction: ${({ direction }) =>\n    `row${direction === 'prev' ? '' : '-reverse'}`};\n  align-items: center;\n  font-size: 18px;\n  margin-bottom: 15px;\n\n  ${IconComponent} {\n    ${({ direction }) =>\n      `margin-${direction === 'prev' ? 'right' : 'left'}`}: 15px;\n  }\n`\n\nconst Title = styled(Text)<{ direction: string }>`\n  font-size: 15px;\n  font-weight: 300;\n  ${({ direction }) =>\n    `text-align: ${direction === 'prev' ? 'left' : 'right'}`};\n\n  @media (max-width: 768px) {\n    font-size: 13px;\n  }\n`\n\nconst PostNavigator: FunctionComponent<PostNavigatorProps> = function ({\n  direction,\n  slug,\n  title,\n}) {\n  const iconType: IconProps['type'] =\n    direction === 'prev' ? 'arrowLeft' : 'arrowRight'\n\n  return (\n    <PostNavigatorComponent to={slug} direction={direction}>\n      <LinkButton direction={direction}>\n        <Icon type={iconType} size={20} />\n        <Text>{direction.charAt(0).toUpperCase() + direction.slice(1)}</Text>\n      </LinkButton>\n\n      <Title direction={direction}>{title}</Title>\n    </PostNavigatorComponent>\n  )\n}\n\nexport default PostNavigator\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'ji5485/ji5485.github.io'\n\nconst Utterances: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances = document.createElement('script')\n    const initialMode = window.document.body.classList.contains('dark')\n      ? 'dark'\n      : 'light'\n\n    const attributes = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'utterances-comment',\n      theme: `github-${initialMode}`,\n      crossorigin: 'anonymous',\n      async: true,\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, String(value))\n    })\n\n    element.current.appendChild(utterances)\n\n    const changeUtterancesMode = (mode: string) => {\n      const utterances = document.querySelector<HTMLIFrameElement>(\n        'iframe.utterances-frame',\n      )\n\n      if (utterances === null || utterances.contentWindow === null) return\n\n      const message = {\n        type: 'set-theme',\n        theme: `github-${mode}`,\n      }\n\n      utterances.contentWindow.postMessage(message, 'https://utteranc.es')\n    }\n\n    const observer = new MutationObserver(() => {\n      const currentMode = window.document.body.classList.contains('dark')\n        ? 'dark'\n        : 'light'\n      changeUtterancesMode(currentMode)\n    })\n\n    observer.observe(window.document.body, {\n      attributes: true,\n      attributeFilter: ['class'],\n      childList: false,\n      characterData: false,\n    })\n\n    return () => observer.disconnect()\n  }, [])\n\n  return <div ref={element} />\n}\n\nexport default Utterances\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport PostNavigator from 'components/molecules/PostNavigator'\nimport Utterances from 'components/molecules/Utterances'\n\nexport type OtherItemInfo = {\n  slug: string\n  title: string\n}\n\ninterface PostItemFootProps {\n  prevItem: OtherItemInfo | null\n  nextItem: OtherItemInfo | null\n}\n\nconst PostNavigatorContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 60px;\n`\n\nconst PostItemFoot: FunctionComponent<PostItemFootProps> = function ({\n  prevItem,\n  nextItem,\n}) {\n  return (\n    <div>\n      <PostNavigatorContainer>\n        {prevItem && <PostNavigator direction=\"prev\" {...prevItem} />}\n        {nextItem && <PostNavigator direction=\"next\" {...nextItem} />}\n      </PostNavigatorContainer>\n\n      <Utterances />\n    </div>\n  )\n}\n\nexport default PostItemFoot\n","import React, { FunctionComponent } from 'react'\nimport PageTemplate from 'components/templates/PageTemplate'\nimport PostItemHead from 'components/organisms/PostItemHead'\nimport PostItemBody from 'components/organisms/PostItemBody'\nimport PostItemFoot, { OtherItemInfo } from 'components/organisms/PostItemFoot'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\n\ninterface BlogPostItemProps {\n  postInfo: {\n    title: string\n    date: string\n    categories: string[]\n    thumbnail: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }\n  html: string\n  prevItem: OtherItemInfo | null\n  nextItem: OtherItemInfo | null\n  toc: string\n}\n\nconst BlogPostItem: FunctionComponent<BlogPostItemProps> = function ({\n  postInfo: {\n    title,\n    date,\n    categories,\n    thumbnail: {\n      childImageSharp: { gatsbyImageData },\n    },\n  },\n  html,\n  prevItem,\n  nextItem,\n  toc,\n}) {\n  return (\n    <PageTemplate>\n      <PostItemHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostItemBody html={html} toc={toc} />\n      <PostItemFoot prevItem={prevItem} nextItem={nextItem} />\n    </PageTemplate>\n  )\n}\n\nexport default BlogPostItem\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { OtherItemInfo } from 'components/organisms/PostItemFoot'\nimport Layout from 'components/templates/Layout'\nimport BlogPostItem from 'components/templates/BlogPostItem'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\n\ntype BlogPostItemTemplateProps = {\n  data: {\n    markdownRemark: {\n      html: string\n      frontmatter: {\n        title: string\n        date: string\n        summary: string\n        categories: string[]\n        thumbnail: {\n          publicURL: string\n          childImageSharp: {\n            gatsbyImageData: IGatsbyImageData\n          }\n        }\n      }\n      tableOfContents: string\n    }\n    site: {\n      siteMetadata: {\n        siteUrl: string\n      }\n    }\n  }\n  pageContext: {\n    prev: OtherItemInfo | null\n    next: OtherItemInfo | null\n    slug: string\n  }\n}\n\nconst BlogPostItemTemplate: FunctionComponent<BlogPostItemTemplateProps> =\n  function ({\n    data: {\n      markdownRemark: { html, frontmatter, tableOfContents },\n      site: {\n        siteMetadata: { siteUrl },\n      },\n    },\n    pageContext: { prev, next, slug },\n  }) {\n    const postItemMetaData = {\n      title: frontmatter.title,\n      description: frontmatter.summary,\n      image: frontmatter.thumbnail.publicURL,\n      url: siteUrl + slug,\n    }\n\n    return (\n      <Layout {...postItemMetaData}>\n        <BlogPostItem\n          postInfo={frontmatter}\n          html={html}\n          prevItem={prev}\n          nextItem={next}\n          toc={tableOfContents}\n        />\n      </Layout>\n    )\n  }\n\nexport default BlogPostItemTemplate\n\nexport const blogQuery = graphql`\n  query getBlogData($slug: String) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date\n        summary\n        categories\n        thumbnail {\n          publicURL\n          childImageSharp {\n            gatsbyImageData(width: 768, height: 450)\n          }\n        }\n      }\n      tableOfContents\n    }\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`\n"],"names":["Title","Text","PostInfo","Categories","TextComponent","Date","title","date","categories","thumbnail","G","image","alt","map","category","key","shortId","dateFormat","MarkdownComponent","html","dangerouslySetInnerHTML","__html","toc","activeSlug","setActiveSlug","useState","headingElements","setHeadingElements","scrollEvent","i","length","top","getBoundingClientRect","id","useEffect","allHeadingTags","Array","from","window","document","querySelectorAll","getElementsByTarget","addEventListener","removeEventListener","TableOfContentsComponent","TOC","useSetHeading","encodeURI","PostItemBodyComponent","PostNavigatorComponent","LinkComponent","direction","LinkButton","IconComponent","slug","iconType","to","Icon","type","size","charAt","toUpperCase","slice","element","createRef","current","utterances","createElement","attributes","src","repo","label","theme","body","classList","contains","crossorigin","async","Object","entries","forEach","value","setAttribute","String","appendChild","observer","MutationObserver","mode","querySelector","contentWindow","message","postMessage","changeUtterancesMode","observe","attributeFilter","childList","characterData","disconnect","ref","PostNavigatorContainer","prevItem","nextItem","postInfo","childImageSharp","gatsbyImageData","PageTemplate","data","markdownRemark","frontmatter","tableOfContents","site","siteMetadata","siteUrl","pageContext","prev","next","postItemMetaData","description","summary","publicURL","url","Layout"],"sourceRoot":""}